# This is an example .env file for a Node.js application.
# Copy this file to .env and fill in the required values.
# Make sure to rename this file to .env before running the application.
# Environment variables for the application
# You can set these variables according to your environment and requirements
# For production, you might want to set NODE_ENV=production
# For development, you can set NODE_ENV=development
# For local development, you can use the following settings
# Example .env file for a Node.js application
# Copy this file to .env and fill in the required values
# Make sure to rename this file to .env before running the application
# Environment variables for the application
# You can set these variables according to your environment and requirements
# For production, you might want to set NODE_ENV=production
# For development, you can set NODE_ENV=development
# For local development, you can use the following settings
# Example .env file for a Node.js application       
NODE_ENV=development
# Port on which the application will run
# You can change this to any port you prefer
PORT=4000
# Allowed origins for CORS
# You can specify multiple origins separated by commas
# Make sure to include the protocol (http:// or https://)
# Example: http://localhost:3000,https://yourdomain.com
# Allowed origins for CORS
ALLOWED_ORIGINS=http://localhost:3000,https://yourdomain.com,http://localhost:4000,http://localhost:8000
# API version for the application
# This is used to version your API endpoints
# You can change this to any versioning scheme you prefer
API_VERSION=api/v1

# DB connection string for MongoDB
# Replace with your actual MongoDB connection string
# Example: mongodb://username:password@host:port/database
# If using MongoDB Atlas, it might look like:
# mongodb+srv://username:
MONGO_URI=
# Example Redis connection string
# If using Redis Cloud, it might look like:
# redis://default: 
REDIS_URL=
REDIS_URL_LOCAL=
